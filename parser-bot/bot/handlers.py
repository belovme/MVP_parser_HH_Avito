import os
import httpx
import logging
from telegram import Update
from telegram.ext import ContextTypes
import openai
import json

logger = logging.getLogger(__name__)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∏ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å HeadHunter."
    )

async def handle_job_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏"""
    try:
        job_description = update.message.text

        # –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        min_experience = 2  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –≤ –≥–æ–¥–∞—Ö
        required_skills = {"python", "django"}  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏

        base_url = os.getenv('API_URL', '').rstrip('/')
        if not base_url.startswith(('http://', 'https://')):
            base_url = f"http://{base_url}"

        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{base_url}/search/",
                json={
                    "position": "Python Developer",
                    "city": "–ú–æ—Å–∫–≤–∞",
                    "description": job_description
                }
            )

        if response.status_code == 200:
            candidates = response.json()
            if not candidates:
                await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ ChatGPT ---
            prompt = (
                f"–í–∞–∫–∞–Ω—Å–∏—è: {job_description}\n"
                f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n"
                f"{candidates}\n"
                "–ü—Ä–æ—Ä–∞–Ω–∂–∏—Ä—É–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –≤—ã–≤–µ–¥–∏ —Ç–æ–ø-5 —Å –∫—Ä–∞—Ç–∫–∏–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º, –ø–æ—á–µ–º—É –æ–Ω–∏ –≤ —Ç–æ–ø–µ. "
                "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ: –§–ò–û, –æ–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏, –ø—Ä–∏—á–∏–Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç–æ–ø."
            )

            openai.api_key = OPENAI_API_KEY
            chat_response = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=1000,
                temperature=0.2,
            )
            answer = chat_response.choices[0].message.content

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            with open("ranked_candidates.json", "a", encoding="utf-8") as f:
                json.dump({
                    "job_description": job_description,
                    "ranked": answer
                }, f, ensure_ascii=False)
                f.write("\n")

            await update.message.reply_text("üîç –í–æ—Ç —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –º–Ω–µ–Ω–∏—é ChatGPT:\n" + answer)

        else:
            logger.error(f"API error: {response.status_code} - {response.text}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except httpx.ConnectError:
        logger.error("Connection error to API")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except httpx.TimeoutException:
        logger.error("API timeout")
        await update.message.reply_text("–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.")