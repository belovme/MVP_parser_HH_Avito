import os
import httpx
import logging
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∏ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å HeadHunter."
    )

async def handle_job_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏"""
    try:
        job_description = update.message.text
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        base_url = os.getenv('API_URL', '').rstrip('/')
        if not base_url.startswith(('http://', 'https://')):
            base_url = f"http://{base_url}"
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{base_url}/search/",
                json={
                    "position": "Python Developer",
                    "city": "–ú–æ—Å–∫–≤–∞",
                    "description": job_description
                }
            )
        
        if response.status_code == 200:
            candidates = response.json()
            if not candidates:
                await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
                
            await update.message.reply_text("üîç –í–æ—Ç —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å HeadHunter:")
            
            for candidate in candidates[:5]:
                try:
                    await update.message.reply_text(
                        f"üë§ {candidate['resume']['fio']}\n"
                        f"üèÜ –û—Ü–µ–Ω–∫–∞: {candidate['score']}/10\n"
                        f"üìù –ê–Ω–∞–ª–∏–∑: {candidate['details']}\n"
                        f"üîó –°—Å—ã–ª–∫–∞: https://hh.ru/resume/{candidate['resume']['source_id']}"
                    )
                except KeyError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
                    continue
                    
            await update.message.reply_text("–•–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞? –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.")
            
        else:
            logger.error(f"API error: {response.status_code} - {response.text}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except httpx.ConnectError:
        logger.error("Connection error to API")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except httpx.TimeoutException:
        logger.error("API timeout")
        await update.message.reply_text("–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.")