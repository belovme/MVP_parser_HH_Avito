# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
import httpx

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∏ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å HeadHunter."
    )

async def handle_job_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    job_description = update.message.text
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{os.getenv('API_URL')}/search/",
            json={
                "position": "Python Developer",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                "city": "–ú–æ—Å–∫–≤–∞",               # –ò–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "description": job_description
            }
        )
    
    if response.status_code == 200:
        candidates = response.json()
        for candidate in candidates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
            await update.message.reply_text(
                f"üë§ {candidate['resume']['fio']}\n"
                f"üèÜ –û—Ü–µ–Ω–∫–∞: {candidate['score']}/10\n"
                f"üìù –ê–Ω–∞–ª–∏–∑: {candidate['details']}\n"
                f"üîó –°—Å—ã–ª–∫–∞: https://hh.ru/resume/{candidate['resume']['source_id']}"
            )
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")